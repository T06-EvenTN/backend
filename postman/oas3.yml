openapi: '3.0.3'
info:
  title: EventAPI
  version: '0.0.1'
  description: 'API per il progetto di ingengeria del software'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/DavideDaCol/EventAPI/0.0.1
  - url: http://localhost:8080
paths:
  /test:
    get:
      description: test endpoint, checks if the server is up
      responses:
        '200':
          description: server is up
          content:
            application/json:
              schema:
                type: string
  /user:
    get:
      summary: Returns all of the users with an account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                 $ref: "#/components/schemas/User"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Adds a new user
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserID"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/login:
    post:
      summary: logs in the user via username and password
      requestBody:
        description: username and password of the user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Password is incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{id}:
    description: returns the user object that corresponds to the supplied ID
    parameters:
        - name: id
          in: path
          description: ID of the user to search
          required: true
          schema:
            $ref: "#/components/schemas/UserID" 
    get:
      summary: returns the user object which matches the supplied ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '400':
          description: Invalid UserID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: deletes a user permanently
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserID"
        '400':
          description: Provided ID isn't valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: updates a user's information
      requestBody:
        description: the informations to update
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserID"
        '400':
          description: Provided ID isn't valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/friends/{id}:
    parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UserID" 
    get:
      summary: The list of friends of a given user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FriendList"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: add a friend to a user
      requestBody:
        description: id of the new friend
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserID"
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '400':
          description: Supplied User/Friend ID is not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /events:
    get:
      summary: Returns all of the events in the database
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/EventList"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: creates a new event 
      requestBody:
        description: the event information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Auth token mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '400':
          description: Event is not formatted correctly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /events/{id}:
    parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
    get:
      summary: returns the event associated with that ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        '404':
          description: No Event Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '400':
          description: Invalid Event ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: updates an event's information
      requestBody:
        description: the new event info
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Provided ID isn't valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No Event Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserID:
      type: string
      description: the unique identifier of every user
    Login:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          description: username of the user
        password:
          type: string
          description: password in plain text
    User:
      required:
        - id
        - email
        - password
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserID"
        email:
          type: string
          description: email address of the user
    Event:
      required:
        - title
        - startDate
        - eventLength
        - position
      type: object
      properties:
        title:
          type: string
          description: name of the event
        startDate:
          type: object
          description: event start date
        eventLength:
          type: integer
          description: event length specified as time offset from the start
        position:
          type: array
          items:
            type: float
          description: main position of the event, given as an array of floats
    FriendList:
      type: array
      items: 
        $ref: "#/components/schemas/User"
    EventList:
      type: array
      items: 
        $ref: "#/components/schemas/Event"
    Error:
      required:
        - message
      type: object
      properties:
        message:
          type: string
          description: a generic error given in non-200 type requests. logs the error message.
security: [bearerAuth: []]