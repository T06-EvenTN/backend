openapi: '3.0.3'
info:
  title: EventAPI
  version: '0.1.1'
  description: 'API for EvenTN, the open source event application for the city of Trento'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/DavideDaCol/EventAPI/0.0.1
  - url: http://localhost:8080
paths:
  /test:
    get:
      tags: [Test the API] 
      description: test endpoint, checks if the server is up
      responses:
        '200':
          description: server is up
          content:
            application/json:
              schema:
                type: string
  /user:
    post:
      tags: [User] 
      summary: Adds a new user
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserID"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [User] 
      summary: deletes a logged in user permanently
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserID"
        '400':
          description: Provided ID isn't valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags: [User] 
      summary: updates a user's email or username
      security: 
        - bearerAuth: []
      requestBody:
        description: the informations to update
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserID"
        '400':
          description: Provided ID isn't valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/all:
    get:
      tags: [User] 
      summary: Returns all of the users with an account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                 $ref: "#/components/schemas/User"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/login:
    post:
      tags: [User] 
      summary: logs in the user via username and password
      requestBody:
        description: username and password of the user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Password is incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/info:
    get:
      tags: [User] 
      summary: returns the user object which matches the supplied ID
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Invalid UserID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/friends:
    get:
      tags: [Friends] 
      summary: The list of friends of a given user
      security: 
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FriendList"
        '400':
          description: Invalid User ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/friends/{friendId}:
    parameters:
          - name: friendId
            in: path
            required: true
            schema:
              type: string
    post:
      tags: [Friends] 
      summary: add a friend (friendID) to a user (API caller)
      security:
      - bearerAuth: []
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '400':
          description: Supplied Friend ID is not valid or already added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User or Friend Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/events:
    get:
      tags: [User] 
      summary: returns the events a user has saved
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/EventList"
        '400':
          description: Invalid User ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Auth Token Mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/events/{eventId}:
    parameters:
          - name: eventId
            in: path
            required: true
            schema:
              type: string
    post:
      tags: [User] 
      summary: adds the supplied event to a user
      security:
      - bearerAuth: []
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/EventList"
        '400':
          description: Event is invalid or already present
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: Auth Token Mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No Event or User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /events:
    post:
      tags: [Events] 
      summary: creates a new event (only if user is logged in)
      security: 
      - bearerAuth: []
      requestBody:
        description: the event information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '403':
          description: Auth token mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '400':
          description: Event is not formatted correctly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /events/all:
    get:
      tags: [Events] 
      summary: Returns all of the events in the database
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/EventList"
        '404':
          description: No User Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /events/info/{id}:
    parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
    get:
      tags: [Events] 
      summary: returns the event associated with that ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        '404':
          description: No Event Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '400':
          description: Invalid Event ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /events/{eventId}:
    parameters:
          - name: eventId
            in: path
            required: true
            schema:
              type: string
    put:
      tags: [Events] 
      summary: updates an event's information
      security:
      - bearerAuth: []
      requestBody:
        description: the new event info
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Provided ID isn't valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No Event Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [Events] 
      summary: deletes an event (event creator must match user)
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: invalid eventId or creator/user mismatch
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No Event Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /events/counter/{eventId}:
    parameters:
          - name: eventId
            in: path
            required: true
            schema:
              type: string
    patch:
      tags: [Events] 
      summary: increases the number of attendees by one
      security:
      - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: invalid eventId or user is already going
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: No Event Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserID:
      type: string
      description: the unique identifier of every user
    Login:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          description: username of the user
        password:
          type: string
          description: password in plain text
    User:
      required:
        - id
        - email
        - password
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserID"
        email:
          type: string
          description: email address of the user
    Event:
      required:
        - title
        - startDate
        - eventLength
        - eventDescription
        - position
        - tag
      type: object
      properties:
        title:
          type: string
          description: name of the event
        startDate:
          type: string
          description: event start date
        eventLength:
          type: integer
          description: event length specified as time offset from the start
        eventDescription:
          type: string
          description: informations about the event
        position:
          type: array
          items:
            type: number
          description: main position of the event, given as an array of floats
        tag:
          $ref: "#/components/schemas/Tag"
            
    FriendList:
      type: array
      items: 
        $ref: "#/components/schemas/User"
    EventList:
      type: array
      items: 
        $ref: "#/components/schemas/Event"
    Tag:
      type: string
      enum:
        - Musica
        - Fastival
        - Sport
        - Conferenza
        - Sagra
      description: type of the event
    Error:
      required:
        - message
      type: object
      properties:
        message:
          type: string
          description: a generic error given in non-200 type requests. logs the error message.